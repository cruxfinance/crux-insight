/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 5.0.12
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Peer {
    #[serde(rename = "address")]
    pub address: String,
    #[serde(rename = "restApiUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rest_api_url: Option<Option<String>>,
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// Basic timestamp definition
    #[serde(rename = "lastSeen", skip_serializing_if = "Option::is_none")]
    pub last_seen: Option<i64>,
    #[serde(rename = "connectionType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub connection_type: Option<Option<ConnectionType>>,
}

impl Peer {
    pub fn new(address: String) -> Peer {
        Peer {
            address,
            rest_api_url: None,
            name: None,
            last_seen: None,
            connection_type: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConnectionType {
    #[serde(rename = "Incoming")]
    Incoming,
    #[serde(rename = "Outgoing")]
    Outgoing,
}

impl Default for ConnectionType {
    fn default() -> ConnectionType {
        Self::Incoming
    }
}

