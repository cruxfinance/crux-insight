/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 5.0.12
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ErgoTransactionOutput {
    /// Base16-encoded transaction box id bytes. Should be 32 bytes long
    #[serde(rename = "boxId", skip_serializing_if = "Option::is_none")]
    pub box_id: Option<String>,
    /// Amount of Ergo token
    #[serde(rename = "value")]
    pub value: i64,
    /// Base16-encoded ergo tree bytes
    #[serde(rename = "ergoTree")]
    pub ergo_tree: String,
    /// Height the output was created at
    #[serde(rename = "creationHeight")]
    pub creation_height: i32,
    /// Assets list in the transaction
    #[serde(rename = "assets", skip_serializing_if = "Option::is_none")]
    pub assets: Option<Vec<crate::models::Asset>>,
    /// Ergo box registers
    #[serde(rename = "additionalRegisters")]
    pub additional_registers: ::std::collections::HashMap<String, String>,
    /// Base16-encoded transaction id bytes
    #[serde(rename = "transactionId", skip_serializing_if = "Option::is_none")]
    pub transaction_id: Option<String>,
    /// Index in the transaction outputs
    #[serde(rename = "index", skip_serializing_if = "Option::is_none")]
    pub index: Option<i32>,
}

impl ErgoTransactionOutput {
    pub fn new(value: i64, ergo_tree: String, creation_height: i32, additional_registers: ::std::collections::HashMap<String, String>) -> ErgoTransactionOutput {
        ErgoTransactionOutput {
            box_id: None,
            value,
            ergo_tree,
            creation_height,
            assets: None,
            additional_registers,
            transaction_id: None,
            index: None,
        }
    }
}


