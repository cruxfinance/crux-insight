/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 5.0.12
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct NipopowProof {
    /// security parameter (min Î¼-level superchain length)
    #[serde(rename = "m")]
    pub m: f32,
    /// security parameter (min suffix length, >= 1)
    #[serde(rename = "k")]
    pub k: f32,
    /// proof prefix headers
    #[serde(rename = "prefix")]
    pub prefix: Vec<crate::models::PopowHeader>,
    #[serde(rename = "suffixHead")]
    pub suffix_head: Box<crate::models::PopowHeader>,
    /// tail of the proof suffix headers
    #[serde(rename = "suffixTail")]
    pub suffix_tail: Vec<crate::models::BlockHeader>,
}

impl NipopowProof {
    pub fn new(m: f32, k: f32, prefix: Vec<crate::models::PopowHeader>, suffix_head: crate::models::PopowHeader, suffix_tail: Vec<crate::models::BlockHeader>) -> NipopowProof {
        NipopowProof {
            m,
            k,
            prefix,
            suffix_head: Box::new(suffix_head),
            suffix_tail,
        }
    }
}


