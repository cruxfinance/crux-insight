/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 5.0.12
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct NodeInfo {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "appVersion")]
    pub app_version: String,
    /// Can be 'null' if state is empty (no full block is applied since node launch)
    #[serde(rename = "fullHeight", deserialize_with = "Option::deserialize")]
    pub full_height: Option<i32>,
    /// Can be 'null' if state is empty (no header applied since node launch)
    #[serde(rename = "headersHeight", deserialize_with = "Option::deserialize")]
    pub headers_height: Option<i32>,
    /// Maximum block height of connected peers. Can be 'null' if state is empty (no peer connected since node launch)
    #[serde(rename = "maxPeerHeight", deserialize_with = "Option::deserialize")]
    pub max_peer_height: Option<i32>,
    /// Base16-encoded 32 byte modifier id
    #[serde(rename = "bestFullHeaderId", deserialize_with = "Option::deserialize")]
    pub best_full_header_id: Option<String>,
    /// Base16-encoded 32 byte modifier id
    #[serde(
        rename = "previousFullHeaderId",
        deserialize_with = "Option::deserialize"
    )]
    pub previous_full_header_id: Option<String>,
    /// Base16-encoded 32 byte modifier id
    #[serde(rename = "bestHeaderId", deserialize_with = "Option::deserialize")]
    pub best_header_id: Option<String>,
    /// Can be 'null' if state is empty (no full block is applied since node launch)
    #[serde(rename = "stateRoot", deserialize_with = "Option::deserialize")]
    pub state_root: Option<String>,
    #[serde(rename = "stateType")]
    pub state_type: StateType,
    /// Can be 'null' if no full block is applied since node launch
    #[serde(rename = "stateVersion", deserialize_with = "Option::deserialize")]
    pub state_version: Option<String>,
    #[serde(rename = "isMining")]
    pub is_mining: bool,
    /// Number of connected peers
    #[serde(rename = "peersCount")]
    pub peers_count: i32,
    /// Current unconfirmed transactions count
    #[serde(rename = "unconfirmedCount")]
    pub unconfirmed_count: i32,
    /// Difficulty on current bestFullHeaderId. Can be 'null' if no full block is applied since node launch. Difficulty is a BigInt integer.
    #[serde(rename = "difficulty", deserialize_with = "Option::deserialize")]
    pub difficulty: Option<i64>,
    /// Basic timestamp definition
    #[serde(rename = "currentTime")]
    pub current_time: i64,
    /// Basic timestamp definition
    #[serde(rename = "launchTime")]
    pub launch_time: i64,
    /// Can be 'null' if no headers is applied since node launch. headersScore is a BigInt integer.
    #[serde(rename = "headersScore", deserialize_with = "Option::deserialize")]
    pub headers_score: Option<f32>,
    /// Can be 'null' if no full block is applied since node launch. fullBlocksScore is a BigInt integer.
    #[serde(rename = "fullBlocksScore", deserialize_with = "Option::deserialize")]
    pub full_blocks_score: Option<f32>,
    /// Base16-encoded 32 byte modifier id
    #[serde(rename = "genesisBlockId", deserialize_with = "Option::deserialize")]
    pub genesis_block_id: Option<String>,
    #[serde(rename = "parameters")]
    pub parameters: crate::models::Parameters,
    /// Whether EIP-27 locked in
    #[serde(rename = "eip27Supported", skip_serializing_if = "Option::is_none")]
    pub eip27_supported: Option<bool>,
    /// Publicly accessible url of node which exposes restApi in firewall
    #[serde(rename = "restApiUrl", skip_serializing_if = "Option::is_none")]
    pub rest_api_url: Option<String>,
}

impl NodeInfo {
    pub fn new(
        name: String,
        app_version: String,
        full_height: Option<i32>,
        headers_height: Option<i32>,
        max_peer_height: Option<i32>,
        best_full_header_id: Option<String>,
        previous_full_header_id: Option<String>,
        best_header_id: Option<String>,
        state_root: Option<String>,
        state_type: StateType,
        state_version: Option<String>,
        is_mining: bool,
        peers_count: i32,
        unconfirmed_count: i32,
        difficulty: Option<i64>,
        current_time: i64,
        launch_time: i64,
        headers_score: Option<f32>,
        full_blocks_score: Option<f32>,
        genesis_block_id: Option<String>,
        parameters: crate::models::Parameters,
    ) -> NodeInfo {
        NodeInfo {
            name,
            app_version,
            full_height,
            headers_height,
            max_peer_height,
            best_full_header_id,
            previous_full_header_id,
            best_header_id,
            state_root,
            state_type,
            state_version,
            is_mining,
            peers_count,
            unconfirmed_count,
            difficulty,
            current_time,
            launch_time,
            headers_score,
            full_blocks_score,
            genesis_block_id,
            parameters,
            eip27_supported: None,
            rest_api_url: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StateType {
    #[serde(rename = "digest")]
    Digest,
    #[serde(rename = "utxo")]
    Utxo,
}

impl Default for StateType {
    fn default() -> StateType {
        Self::Digest
    }
}
