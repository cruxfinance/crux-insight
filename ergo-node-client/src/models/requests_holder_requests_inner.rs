/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 5.0.12
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RequestsHolderRequestsInner {
    /// Encoded Ergo Address
    #[serde(rename = "address")]
    pub address: String,
    /// Payment amount
    #[serde(rename = "value")]
    pub value: i64,
    /// Assets list in the transaction
    #[serde(rename = "assets", skip_serializing_if = "Option::is_none")]
    pub assets: Option<Vec<crate::models::Asset>>,
    /// Ergo box registers
    #[serde(rename = "registers", skip_serializing_if = "Option::is_none")]
    pub registers: Option<::std::collections::HashMap<String, String>>,
    /// Assets list to burn in the transaction
    #[serde(rename = "assetsToBurn")]
    pub assets_to_burn: Vec<crate::models::Asset>,
    /// Optional, amount of ergs to be put into box with issued assets
    #[serde(rename = "ergValue", skip_serializing_if = "Option::is_none")]
    pub erg_value: Option<i64>,
    /// Supply amount
    #[serde(rename = "amount")]
    pub amount: i64,
    /// Assets name
    #[serde(rename = "name")]
    pub name: String,
    /// Assets description
    #[serde(rename = "description")]
    pub description: String,
    /// Number of decimal places
    #[serde(rename = "decimals")]
    pub decimals: i32,
}

impl RequestsHolderRequestsInner {
    pub fn new(address: String, value: i64, assets_to_burn: Vec<crate::models::Asset>, amount: i64, name: String, description: String, decimals: i32) -> RequestsHolderRequestsInner {
        RequestsHolderRequestsInner {
            address,
            value,
            assets: None,
            registers: None,
            assets_to_burn,
            erg_value: None,
            amount,
            name,
            description,
            decimals,
        }
    }
}


