/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 5.0.12
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ErgoLikeContext {
    #[serde(rename = "lastBlockUtxoRoot")]
    pub last_block_utxo_root: crate::models::AvlTreeData,
    /// fixed number of last block headers in descending order (first header is the newest one)
    #[serde(rename = "headers")]
    pub headers: Vec<crate::models::SigmaHeader>,
    #[serde(rename = "preHeader")]
    pub pre_header: crate::models::PreHeader,
    /// boxes, that corresponds to id's of `spendingTransaction.dataInputs`
    #[serde(rename = "dataBoxes")]
    pub data_boxes: Vec<crate::models::ErgoTransactionOutput>,
    /// boxes, that corresponds to id's of `spendingTransaction.inputs`
    #[serde(rename = "boxesToSpend")]
    pub boxes_to_spend: Vec<crate::models::ErgoTransactionOutput>,
    #[serde(rename = "spendingTransaction")]
    pub spending_transaction: crate::models::ErgoLikeTransaction,
    /// index of the box in `boxesToSpend` that contains the script we're evaluating
    #[serde(rename = "selfIndex")]
    pub self_index: i64,
    /// prover-defined key-value pairs, that may be used inside a script
    #[serde(rename = "extension")]
    pub extension: serde_json::Value,
    /// validation parameters passed to Interpreter.verify to detect soft-fork conditions
    #[serde(rename = "validationSettings")]
    pub validation_settings: String,
    /// hard limit on accumulated execution cost, if exceeded lead to CostLimitException to be thrown
    #[serde(rename = "costLimit")]
    pub cost_limit: i64,
    /// initial value of execution cost already accumulated before Interpreter.verify is called
    #[serde(rename = "initCost")]
    pub init_cost: i64,
}

impl ErgoLikeContext {
    pub fn new(last_block_utxo_root: crate::models::AvlTreeData, headers: Vec<crate::models::SigmaHeader>, pre_header: crate::models::PreHeader, data_boxes: Vec<crate::models::ErgoTransactionOutput>, boxes_to_spend: Vec<crate::models::ErgoTransactionOutput>, spending_transaction: crate::models::ErgoLikeTransaction, self_index: i64, extension: serde_json::Value, validation_settings: String, cost_limit: i64, init_cost: i64) -> ErgoLikeContext {
        ErgoLikeContext {
            last_block_utxo_root,
            headers,
            pre_header,
            data_boxes,
            boxes_to_spend,
            spending_transaction,
            self_index,
            extension,
            validation_settings,
            cost_limit,
            init_cost,
        }
    }
}


