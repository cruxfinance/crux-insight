/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 5.0.12
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

/// SigmaBoolean : Algebraic data type of sigma proposition expressions



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SigmaBoolean {
    /// Sigma opCode
    #[serde(rename = "op")]
    pub op: i32,
    /// Base16-encoded bytes
    #[serde(rename = "h", skip_serializing_if = "Option::is_none")]
    pub h: Option<String>,
    /// Base16-encoded bytes
    #[serde(rename = "g", skip_serializing_if = "Option::is_none")]
    pub g: Option<String>,
    /// Base16-encoded bytes
    #[serde(rename = "u", skip_serializing_if = "Option::is_none")]
    pub u: Option<String>,
    /// Base16-encoded bytes
    #[serde(rename = "v", skip_serializing_if = "Option::is_none")]
    pub v: Option<String>,
    #[serde(rename = "condition", skip_serializing_if = "Option::is_none")]
    pub condition: Option<bool>,
}

impl SigmaBoolean {
    /// Algebraic data type of sigma proposition expressions
    pub fn new(op: i32) -> SigmaBoolean {
        SigmaBoolean {
            op,
            h: None,
            g: None,
            u: None,
            v: None,
            condition: None,
        }
    }
}


