/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 5.0.12
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

/// IndexedErgoTransaction : Transaction indexed with extra information



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct IndexedErgoTransaction {
    /// Base16-encoded transaction id bytes
    #[serde(rename = "id")]
    pub id: String,
    /// Transaction inputs
    #[serde(rename = "inputs")]
    pub inputs: Vec<crate::models::ErgoTransactionInput>,
    /// Transaction data inputs
    #[serde(rename = "dataInputs")]
    pub data_inputs: Vec<crate::models::ErgoTransactionDataInput>,
    /// Transaction outputs
    #[serde(rename = "outputs")]
    pub outputs: Vec<crate::models::ErgoTransactionOutput>,
    /// Height of a block the transaction was included in
    #[serde(rename = "inclusionHeight")]
    pub inclusion_height: i32,
    /// Number of transaction confirmations
    #[serde(rename = "numConfirmations")]
    pub num_confirmations: i32,
    /// Base16-encoded 32 byte modifier id
    #[serde(rename = "blockId")]
    pub block_id: String,
    /// Basic timestamp definition
    #[serde(rename = "timestamp")]
    pub timestamp: i64,
    /// index of the transaction in the block it was included in
    #[serde(rename = "index")]
    pub index: i32,
    /// Global index of the transaction in the blockchain
    #[serde(rename = "globalIndex")]
    pub global_index: i64,
    /// Size in bytes
    #[serde(rename = "size")]
    pub size: i32,
}

impl IndexedErgoTransaction {
    /// Transaction indexed with extra information
    pub fn new(id: String, inputs: Vec<crate::models::ErgoTransactionInput>, data_inputs: Vec<crate::models::ErgoTransactionDataInput>, outputs: Vec<crate::models::ErgoTransactionOutput>, inclusion_height: i32, num_confirmations: i32, block_id: String, timestamp: i64, index: i32, global_index: i64, size: i32) -> IndexedErgoTransaction {
        IndexedErgoTransaction {
            id,
            inputs,
            data_inputs,
            outputs,
            inclusion_height,
            num_confirmations,
            block_id,
            timestamp,
            index,
            global_index,
            size,
        }
    }
}


