/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 5.0.12
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "object_type")]
pub enum InputHintsValueInner {
    #[serde(rename = "cmtReal")]
    Commitment {
        #[serde(rename = "hint")]
        hint: Hint,
        #[serde(rename = "pubkey")]
        pubkey: Box<crate::models::SigmaBoolean>,
        #[serde(rename = "position")]
        position: String,
        #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
        r#type: Option<RHashType>,
        /// a group element of the commitment
        #[serde(rename = "a")]
        a: String,
        /// b group element of the commitment (needed for DHT protocol only)
        #[serde(rename = "b", skip_serializing_if = "Option::is_none")]
        b: Option<String>,
    },
    #[serde(rename = "cmtWithSecret")]
    CommitmentWithSecret {
        #[serde(rename = "hint")]
        hint: Hint,
        #[serde(rename = "pubkey")]
        pubkey: Box<crate::models::SigmaBoolean>,
        #[serde(rename = "position")]
        position: String,
        #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
        r#type: Option<RHashType>,
        /// a group element of the commitment
        #[serde(rename = "a")]
        a: String,
        /// b group element of the commitment (needed for DHT protocol only)
        #[serde(rename = "b", skip_serializing_if = "Option::is_none")]
        b: Option<String>,
    },
    #[serde(rename = "proofReal")]
    SecretProven {
        #[serde(rename = "hint")]
        hint: Hint,
        #[serde(rename = "challenge")]
        challenge: String,
        #[serde(rename = "pubkey")]
        pubkey: Box<crate::models::SigmaBoolean>,
        #[serde(rename = "proof")]
        proof: String,
        #[serde(rename = "position")]
        position: String,
    },
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Hint {
    #[serde(rename = "proofReal")]
    ProofReal,
    #[serde(rename = "proofSimulated")]
    ProofSimulated,
}

impl Default for Hint {
    fn default() -> Hint {
        Self::ProofReal
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "dlog")]
    Dlog,
    #[serde(rename = "dht")]
    Dht,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Dlog
    }
}
