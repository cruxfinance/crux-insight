/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 5.0.12
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BlockHeaderWithoutPow {
    /// Base16-encoded 32 byte modifier id
    #[serde(rename = "id")]
    pub id: String,
    /// Basic timestamp definition
    #[serde(rename = "timestamp")]
    pub timestamp: i64,
    /// Ergo blockchain protocol version
    #[serde(rename = "version")]
    pub version: i32,
    /// Base16-encoded 32 byte digest
    #[serde(rename = "adProofsRoot")]
    pub ad_proofs_root: String,
    /// Base16-encoded 33 byte digest - digest with extra byte with tree height
    #[serde(rename = "stateRoot")]
    pub state_root: String,
    /// Base16-encoded 32 byte digest
    #[serde(rename = "transactionsRoot")]
    pub transactions_root: String,
    #[serde(rename = "nBits")]
    pub n_bits: i64,
    /// Base16-encoded 32 byte digest
    #[serde(rename = "extensionHash")]
    pub extension_hash: String,
    #[serde(rename = "height")]
    pub height: i32,
    #[serde(rename = "difficulty")]
    pub difficulty: i32,
    /// Base16-encoded 32 byte modifier id
    #[serde(rename = "parentId")]
    pub parent_id: String,
    /// Base16-encoded votes for a soft-fork and parameters
    #[serde(rename = "votes")]
    pub votes: String,
    /// Size in bytes
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i32>,
    /// Base16-encoded 32 byte modifier id
    #[serde(rename = "extensionId", skip_serializing_if = "Option::is_none")]
    pub extension_id: Option<String>,
    /// Base16-encoded 32 byte modifier id
    #[serde(rename = "transactionsId", skip_serializing_if = "Option::is_none")]
    pub transactions_id: Option<String>,
    /// Base16-encoded 32 byte modifier id
    #[serde(rename = "adProofsId", skip_serializing_if = "Option::is_none")]
    pub ad_proofs_id: Option<String>,
}

impl BlockHeaderWithoutPow {
    pub fn new(id: String, timestamp: i64, version: i32, ad_proofs_root: String, state_root: String, transactions_root: String, n_bits: i64, extension_hash: String, height: i32, difficulty: i32, parent_id: String, votes: String) -> BlockHeaderWithoutPow {
        BlockHeaderWithoutPow {
            id,
            timestamp,
            version,
            ad_proofs_root,
            state_root,
            transactions_root,
            n_bits,
            extension_hash,
            height,
            difficulty,
            parent_id,
            votes,
            size: None,
            extension_id: None,
            transactions_id: None,
            ad_proofs_id: None,
        }
    }
}


