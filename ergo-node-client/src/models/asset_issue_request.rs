/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 5.0.12
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

/// AssetIssueRequest : Request for generation of asset issue transaction



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AssetIssueRequest {
    /// Encoded Ergo Address
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// Optional, amount of ergs to be put into box with issued assets
    #[serde(rename = "ergValue", skip_serializing_if = "Option::is_none")]
    pub erg_value: Option<i64>,
    /// Supply amount
    #[serde(rename = "amount")]
    pub amount: i64,
    /// Assets name
    #[serde(rename = "name")]
    pub name: String,
    /// Assets description
    #[serde(rename = "description")]
    pub description: String,
    /// Number of decimal places
    #[serde(rename = "decimals")]
    pub decimals: i32,
    /// Ergo box registers
    #[serde(rename = "registers", skip_serializing_if = "Option::is_none")]
    pub registers: Option<::std::collections::HashMap<String, String>>,
}

impl AssetIssueRequest {
    /// Request for generation of asset issue transaction
    pub fn new(amount: i64, name: String, description: String, decimals: i32) -> AssetIssueRequest {
        AssetIssueRequest {
            address: None,
            erg_value: None,
            amount,
            name,
            description,
            decimals,
            registers: None,
        }
    }
}


