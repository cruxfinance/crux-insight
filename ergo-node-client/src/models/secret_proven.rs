/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 5.0.12
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SecretProven {
    #[serde(rename = "hint")]
    pub hint: Hint,
    #[serde(rename = "challenge")]
    pub challenge: String,
    #[serde(rename = "pubkey")]
    pub pubkey: Box<crate::models::SigmaBoolean>,
    #[serde(rename = "proof")]
    pub proof: String,
    #[serde(rename = "position")]
    pub position: String,
}

impl SecretProven {
    pub fn new(hint: Hint, challenge: String, pubkey: crate::models::SigmaBoolean, proof: String, position: String) -> SecretProven {
        SecretProven {
            hint,
            challenge,
            pubkey: Box::new(pubkey),
            proof,
            position,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Hint {
    #[serde(rename = "proofReal")]
    ProofReal,
    #[serde(rename = "proofSimulated")]
    ProofSimulated,
}

impl Default for Hint {
    fn default() -> Hint {
        Self::ProofReal
    }
}

