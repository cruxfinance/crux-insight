/*
 * Ergo Node API
 *
 * API docs for Ergo Node. Models are shared between all Ergo products
 *
 * The version of the OpenAPI document: 5.0.12
 * Contact: ergoplatform@protonmail.com
 * Generated by: https://openapi-generator.tech
 */

/// Commitment : basic trait for prover commitments



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Commitment {
    #[serde(rename = "hint")]
    pub hint: Hint,
    #[serde(rename = "pubkey")]
    pub pubkey: Box<crate::models::SigmaBoolean>,
    #[serde(rename = "position")]
    pub position: String,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    /// a group element of the commitment
    #[serde(rename = "a")]
    pub a: String,
    /// b group element of the commitment (needed for DHT protocol only)
    #[serde(rename = "b", skip_serializing_if = "Option::is_none")]
    pub b: Option<String>,
}

impl Commitment {
    /// basic trait for prover commitments
    pub fn new(hint: Hint, pubkey: crate::models::SigmaBoolean, position: String, a: String) -> Commitment {
        Commitment {
            hint,
            pubkey: Box::new(pubkey),
            position,
            r#type: None,
            a,
            b: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Hint {
    #[serde(rename = "cmtWithSecret")]
    CmtWithSecret,
    #[serde(rename = "cmtReal")]
    CmtReal,
    #[serde(rename = "cmtSimulated")]
    CmtSimulated,
}

impl Default for Hint {
    fn default() -> Hint {
        Self::CmtWithSecret
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "dlog")]
    Dlog,
    #[serde(rename = "dht")]
    Dht,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Dlog
    }
}

